"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_helpers_1 = require("../common.helpers");
describe('#pipe', () => {
    test('works correctly with more than 2 functions', () => {
        const add = (a) => (b) => b + a;
        const substract = (a) => (b) => b - a;
        const multiply = (a) => (b) => b * a;
        const result = common_helpers_1.pipe(add(1), substract(2), multiply(2))(10);
        expect(result).toEqual(18);
    });
    test('works correctly with 1 function', () => {
        const add = (a) => (b) => b + a;
        const result = common_helpers_1.pipe(add(1))(10);
        expect(result).toEqual(11);
    });
});
describe('#ap', () => {
    test('works correctly with more than 2 functions', () => {
        const user = {
            firstName: 'Ivo',
            lastName: 'Bobul',
            age: '65',
            sex: 'male',
        };
        const prop = (name) => (obj) => obj[name];
        const result = common_helpers_1.ap(prop('age'), prop('lastName'), prop('firstName'))(user);
        expect(result).toEqual(['65', 'Bobul', 'Ivo']);
    });
    test('works correctly with 1 function', () => {
        const user = {
            firstName: 'Ivo',
            lastName: 'Bobul',
            age: '65',
            sex: 'male',
        };
        const prop = (name) => (obj) => obj[name];
        const result = common_helpers_1.ap(prop('age'))(user);
        expect(result).toEqual(['65']);
    });
});
describe('#splitListByElement', () => {
    test('works correctly in list without needle element', () => {
        const list = ['s', 'u', 'r', 'p', 'r', 'i', 's', 'e'];
        const result = common_helpers_1.splitListByElement('a', list);
        expect(result).toEqual([list]);
    });
    test('works correctly with 1 needle element', () => {
        const list = ['s', 'p', 'a', 'm'];
        const result = common_helpers_1.splitListByElement('a', list);
        expect(result).toEqual([['s', 'p'], ['m']]);
    });
    test('works correctly with more than 2 needle elements', () => {
        const list = [
            's',
            'p',
            'a',
            'm',
            'a',
            's',
            's',
            'a',
            's',
            's',
            'i',
            'n',
        ];
        const result = common_helpers_1.splitListByElement('a', list);
        expect(result).toEqual([
            ['s', 'p'],
            ['m'],
            ['s', 's'],
            ['s', 's', 'i', 'n'],
        ]);
    });
    test('works correctly with needle element in the end', () => {
        const list = ['h', 'o', 'h', 'm', 'a'];
        const result = common_helpers_1.splitListByElement('a', list);
        expect(result).toEqual([['h', 'o', 'h', 'm']]);
    });
    test('works correctly with needle element from the start', () => {
        const list = ['a', 'c', 't', 'i', 'o', 'n'];
        const result = common_helpers_1.splitListByElement('a', list);
        expect(result).toEqual([['c', 't', 'i', 'o', 'n']]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmhlbHBlcnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3NwZWNzL2NvbW1vbi5oZWxwZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFBZ0U7QUFFaEUsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDckIsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUV0RCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0MsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUdwRCxNQUFNLE1BQU0sR0FBRyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7UUFHMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFFM0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRy9DLE1BQU0sTUFBTSxHQUFHLHFCQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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